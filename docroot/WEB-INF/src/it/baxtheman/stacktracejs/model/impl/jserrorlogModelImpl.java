/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.baxtheman.stacktracejs.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import it.baxtheman.stacktracejs.model.jserrorlog;
import it.baxtheman.stacktracejs.model.jserrorlogModel;
import it.baxtheman.stacktracejs.model.jserrorlogSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the jserrorlog service. Represents a row in the &quot;stacktracejs_jserrorlog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.baxtheman.stacktracejs.model.jserrorlogModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link jserrorlogImpl}.
 * </p>
 *
 * @author @baxtheman
 * @see jserrorlogImpl
 * @see it.baxtheman.stacktracejs.model.jserrorlog
 * @see it.baxtheman.stacktracejs.model.jserrorlogModel
 * @generated
 */
@JSON(strict = true)
public class jserrorlogModelImpl extends BaseModelImpl<jserrorlog>
	implements jserrorlogModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a jserrorlog model instance should use the {@link it.baxtheman.stacktracejs.model.jserrorlog} interface instead.
	 */
	public static final String TABLE_NAME = "stacktracejs_jserrorlog";
	public static final Object[][] TABLE_COLUMNS = {
			{ "jserrorlogId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "location", Types.VARCHAR },
			{ "msg", Types.VARCHAR },
			{ "url", Types.VARCHAR },
			{ "line", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table stacktracejs_jserrorlog (jserrorlogId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,location VARCHAR(2000) null,msg VARCHAR(2000) null,url VARCHAR(2000) null,line VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table stacktracejs_jserrorlog";
	public static final String ORDER_BY_JPQL = " ORDER BY jserrorlog.createDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY stacktracejs_jserrorlog.createDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.baxtheman.stacktracejs.model.jserrorlog"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.baxtheman.stacktracejs.model.jserrorlog"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.it.baxtheman.stacktracejs.model.jserrorlog"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static jserrorlog toModel(jserrorlogSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		jserrorlog model = new jserrorlogImpl();

		model.setJserrorlogId(soapModel.getJserrorlogId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setLocation(soapModel.getLocation());
		model.setMsg(soapModel.getMsg());
		model.setUrl(soapModel.getUrl());
		model.setLine(soapModel.getLine());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<jserrorlog> toModels(jserrorlogSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<jserrorlog> models = new ArrayList<jserrorlog>(soapModels.length);

		for (jserrorlogSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.baxtheman.stacktracejs.model.jserrorlog"));

	public jserrorlogModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _jserrorlogId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setJserrorlogId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _jserrorlogId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return jserrorlog.class;
	}

	@Override
	public String getModelClassName() {
		return jserrorlog.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("jserrorlogId", getJserrorlogId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("location", getLocation());
		attributes.put("msg", getMsg());
		attributes.put("url", getUrl());
		attributes.put("line", getLine());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long jserrorlogId = (Long)attributes.get("jserrorlogId");

		if (jserrorlogId != null) {
			setJserrorlogId(jserrorlogId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		String location = (String)attributes.get("location");

		if (location != null) {
			setLocation(location);
		}

		String msg = (String)attributes.get("msg");

		if (msg != null) {
			setMsg(msg);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		String line = (String)attributes.get("line");

		if (line != null) {
			setLine(line);
		}
	}

	@JSON
	@Override
	public long getJserrorlogId() {
		return _jserrorlogId;
	}

	@Override
	public void setJserrorlogId(long jserrorlogId) {
		_jserrorlogId = jserrorlogId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public String getLocation() {
		if (_location == null) {
			return StringPool.BLANK;
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		_location = location;
	}

	@JSON
	@Override
	public String getMsg() {
		if (_msg == null) {
			return StringPool.BLANK;
		}
		else {
			return _msg;
		}
	}

	@Override
	public void setMsg(String msg) {
		_msg = msg;
	}

	@JSON
	@Override
	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@JSON
	@Override
	public String getLine() {
		if (_line == null) {
			return StringPool.BLANK;
		}
		else {
			return _line;
		}
	}

	@Override
	public void setLine(String line) {
		_line = line;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			jserrorlog.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public jserrorlog toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (jserrorlog)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		jserrorlogImpl jserrorlogImpl = new jserrorlogImpl();

		jserrorlogImpl.setJserrorlogId(getJserrorlogId());
		jserrorlogImpl.setGroupId(getGroupId());
		jserrorlogImpl.setCompanyId(getCompanyId());
		jserrorlogImpl.setUserId(getUserId());
		jserrorlogImpl.setUserName(getUserName());
		jserrorlogImpl.setCreateDate(getCreateDate());
		jserrorlogImpl.setLocation(getLocation());
		jserrorlogImpl.setMsg(getMsg());
		jserrorlogImpl.setUrl(getUrl());
		jserrorlogImpl.setLine(getLine());

		jserrorlogImpl.resetOriginalValues();

		return jserrorlogImpl;
	}

	@Override
	public int compareTo(jserrorlog jserrorlog) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), jserrorlog.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof jserrorlog)) {
			return false;
		}

		jserrorlog jserrorlog = (jserrorlog)obj;

		long primaryKey = jserrorlog.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		jserrorlogModelImpl jserrorlogModelImpl = this;

		jserrorlogModelImpl._originalGroupId = jserrorlogModelImpl._groupId;

		jserrorlogModelImpl._setOriginalGroupId = false;

		jserrorlogModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<jserrorlog> toCacheModel() {
		jserrorlogCacheModel jserrorlogCacheModel = new jserrorlogCacheModel();

		jserrorlogCacheModel.jserrorlogId = getJserrorlogId();

		jserrorlogCacheModel.groupId = getGroupId();

		jserrorlogCacheModel.companyId = getCompanyId();

		jserrorlogCacheModel.userId = getUserId();

		jserrorlogCacheModel.userName = getUserName();

		String userName = jserrorlogCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			jserrorlogCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			jserrorlogCacheModel.createDate = createDate.getTime();
		}
		else {
			jserrorlogCacheModel.createDate = Long.MIN_VALUE;
		}

		jserrorlogCacheModel.location = getLocation();

		String location = jserrorlogCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			jserrorlogCacheModel.location = null;
		}

		jserrorlogCacheModel.msg = getMsg();

		String msg = jserrorlogCacheModel.msg;

		if ((msg != null) && (msg.length() == 0)) {
			jserrorlogCacheModel.msg = null;
		}

		jserrorlogCacheModel.url = getUrl();

		String url = jserrorlogCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			jserrorlogCacheModel.url = null;
		}

		jserrorlogCacheModel.line = getLine();

		String line = jserrorlogCacheModel.line;

		if ((line != null) && (line.length() == 0)) {
			jserrorlogCacheModel.line = null;
		}

		return jserrorlogCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{jserrorlogId=");
		sb.append(getJserrorlogId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", location=");
		sb.append(getLocation());
		sb.append(", msg=");
		sb.append(getMsg());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", line=");
		sb.append(getLine());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("it.baxtheman.stacktracejs.model.jserrorlog");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>jserrorlogId</column-name><column-value><![CDATA[");
		sb.append(getJserrorlogId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>location</column-name><column-value><![CDATA[");
		sb.append(getLocation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>msg</column-name><column-value><![CDATA[");
		sb.append(getMsg());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>line</column-name><column-value><![CDATA[");
		sb.append(getLine());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = jserrorlog.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			jserrorlog.class
		};
	private long _jserrorlogId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private String _location;
	private String _msg;
	private String _url;
	private String _line;
	private long _columnBitmask;
	private jserrorlog _escapedModel;
}